/*
    Copyright 2005 Carsten Raskgaard
    Copyright 2010 Nets DanID


    This file is part of OpenOcesAPI.

    OpenOcesAPI is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    OpenOcesAPI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with OpenOcesAPI; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


    Note to developers:
    If you add code to this file, please take a minute to add an additional
    @author statement below.
*/

/* $Id: OpensignSignatureFactory.java,v 1.5 2006/10/22 12:36:00 cara Exp $ */

package org.openoces.ooapi.signatures;

import org.apache.xml.security.utils.IgnoreAllErrorHandler;
import org.openoces.ooapi.exceptions.InternalException;
import org.openoces.ooapi.exceptions.NonOpensignSignatureException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.ByteArrayInputStream;

/**
 * This is a singleton class used to construct objects representing xmldsig signature generated by OpenSign. Use this
 * class to instantiate high-level {@link OpensignSignature} objects from a raw xmldsig document generated by
 * OpenSign
 *
 * @author Carsten Raskgaard  <carsten@raskgaard.dk>
 */
public class OpensignSignatureFactory {
	private static OpensignSignatureFactory ourInstance = new OpensignSignatureFactory();
    private DocumentBuilderFactory dbf = null;

    public static OpensignSignatureFactory getInstance() throws InternalException {
        return ourInstance;
    }

    private OpensignSignatureFactory() {
    	org.apache.xml.security.Init.init();
    	dbf = DocumentBuilderFactory.newInstance();
    	dbf.setNamespaceAware(true);
    	dbf.setExpandEntityReferences(false);
    	dbf.setXIncludeAware(false);
        try {
            dbf.setFeature("http://xml.org/sax/features/external-general-entities", false); //ignore external entity include;
            dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);   //disallow usage of DOCTYPE
    	} catch (ParserConfigurationException e) {
    		throw new IllegalStateException(e);
    	}
    }

    private DocumentBuilder createDocumentBuilder() {
        try {
            DocumentBuilder db = dbf.newDocumentBuilder();
            db.setErrorHandler(new IgnoreAllErrorHandler());
            return db;
        } catch (ParserConfigurationException e) {
            throw new IllegalStateException(e);
        }
    }

    public OpensignAbstractSignature generateOpensignSignature(String xmlDoc) throws NonOpensignSignatureException, InternalException {
        if (xmlDoc == null) {
            throw new IllegalArgumentException("xmlDoc cannot be null");
        }
        if (xmlDoc.length() < 10 && !xmlDoc.startsWith("<")) {
        	throw new Oces2ErrorCode(xmlDoc);
        }
		try {
			Document doc = createDocumentBuilder().parse(new ByteArrayInputStream(xmlDoc.getBytes("UTF-8")));
			OpensignSignature signature = new OpensignSignature(doc);
			SignatureProperty actionProperty = signature.getSignatureProperties().get("action");
			if (actionProperty != null && ("bG9nb24=".equals(actionProperty.getValue()) || "logon".equalsIgnoreCase(actionProperty.getValue()))) {
				return new OpenlogonSignature(doc);
			}
			return signature;
		} catch (SAXException e) {
            throw new IllegalArgumentException("Cannot parse xmlDoc " + xmlDoc, e);
		} catch (Exception e) {
			throw new InternalException(e);
        }
    }
}