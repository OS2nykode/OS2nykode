//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OmFamilieCPRService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/2/", ConfigurationName="OmFamilieCPRService.CprLookupServicePortType")]
    public interface CprLookupServicePortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmFamilieCPRService.callGctpServiceResponse> callGctpServiceAsync(OmFamilieCPRService.callGctpServiceRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/2/")]
    public partial class GCTPLookupRequestType
    {
        
        private InvocationContextType invocationContextField;
        
        private string gctpMessageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://serviceplatformen.dk/xml/schemas/InvocationContext/1/", Order=0)]
        public InvocationContextType InvocationContext
        {
            get
            {
                return this.invocationContextField;
            }
            set
            {
                this.invocationContextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string gctpMessage
        {
            get
            {
                return this.gctpMessageField;
            }
            set
            {
                this.gctpMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://serviceplatformen.dk/xml/schemas/InvocationContext/1/")]
    public partial class InvocationContextType
    {
        
        private string serviceAgreementUUIDField;
        
        private string userSystemUUIDField;
        
        private string userUUIDField;
        
        private string onBehalfOfUserField;
        
        private string serviceUUIDField;
        
        private string callersServiceCallIdentifierField;
        
        private string accountingInfoField;
        
        /// <remarks/>
        public string ServiceAgreementUUID
        {
            get
            {
                return this.serviceAgreementUUIDField;
            }
            set
            {
                this.serviceAgreementUUIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserSystemUUID
        {
            get
            {
                return this.userSystemUUIDField;
            }
            set
            {
                this.userSystemUUIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserUUID
        {
            get
            {
                return this.userUUIDField;
            }
            set
            {
                this.userUUIDField = value;
            }
        }
        
        /// <remarks/>
        public string OnBehalfOfUser
        {
            get
            {
                return this.onBehalfOfUserField;
            }
            set
            {
                this.onBehalfOfUserField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceUUID
        {
            get
            {
                return this.serviceUUIDField;
            }
            set
            {
                this.serviceUUIDField = value;
            }
        }
        
        /// <remarks/>
        public string CallersServiceCallIdentifier
        {
            get
            {
                return this.callersServiceCallIdentifierField;
            }
            set
            {
                this.callersServiceCallIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string AccountingInfo
        {
            get
            {
                return this.accountingInfoField;
            }
            set
            {
                this.accountingInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/2/")]
    public partial class GCTPLookupResponseType
    {
        
        private string resultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string result
        {
            get
            {
                return this.resultField;
            }
            set
            {
                this.resultField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class callGctpServiceRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/2/", Order=0)]
        public OmFamilieCPRService.GCTPLookupRequestType callGCTPCheckServiceRequest;
        
        public callGctpServiceRequest()
        {
        }
        
        public callGctpServiceRequest(OmFamilieCPRService.GCTPLookupRequestType callGCTPCheckServiceRequest)
        {
            this.callGCTPCheckServiceRequest = callGCTPCheckServiceRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class callGctpServiceResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/2/", Order=0)]
        public OmFamilieCPRService.GCTPLookupResponseType callGCTPCheckServiceResponse;
        
        public callGctpServiceResponse()
        {
        }
        
        public callGctpServiceResponse(OmFamilieCPRService.GCTPLookupResponseType callGCTPCheckServiceResponse)
        {
            this.callGCTPCheckServiceResponse = callGCTPCheckServiceResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface CprLookupServicePortTypeChannel : OmFamilieCPRService.CprLookupServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class CprLookupServicePortTypeClient : System.ServiceModel.ClientBase<OmFamilieCPRService.CprLookupServicePortType>, OmFamilieCPRService.CprLookupServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CprLookupServicePortTypeClient() : 
                base(CprLookupServicePortTypeClient.GetDefaultBinding(), CprLookupServicePortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CprServicePort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CprLookupServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(CprLookupServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), CprLookupServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CprLookupServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CprLookupServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CprLookupServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CprLookupServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CprLookupServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmFamilieCPRService.callGctpServiceResponse> OmFamilieCPRService.CprLookupServicePortType.callGctpServiceAsync(OmFamilieCPRService.callGctpServiceRequest request)
        {
            return base.Channel.callGctpServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmFamilieCPRService.callGctpServiceResponse> callGctpServiceAsync(OmFamilieCPRService.GCTPLookupRequestType callGCTPCheckServiceRequest)
        {
            OmFamilieCPRService.callGctpServiceRequest inValue = new OmFamilieCPRService.callGctpServiceRequest();
            inValue.callGCTPCheckServiceRequest = callGCTPCheckServiceRequest;
            return ((OmFamilieCPRService.CprLookupServicePortType)(this)).callGctpServiceAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CprServicePort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CprServicePort))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/service/CPRLookup/CPRLookup/2");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CprLookupServicePortTypeClient.GetBindingForEndpoint(EndpointConfiguration.CprServicePort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CprLookupServicePortTypeClient.GetEndpointAddress(EndpointConfiguration.CprServicePort);
        }
        
        public enum EndpointConfiguration
        {
            
            CprServicePort,
        }
    }
}
